{} represent values

GET /api/v/0.1/user/{ID}
returs one user by ID with fields: name,register_date,gender,birth_date,profile_description,profile_picture,profile_visibility,type
later may be blocked if auth is not provided, depending on profile_visibility

PATCH /api/v/0.1/user/
updates one user identified session, fields: profile_description,profile_picture,profile_visibility, least one must be provided in body as json
later will be only avalibe if auth is present

DELETE /api/v/0.1/user/
deletes one user identified session, returns ID. Non-prenament, yet irreversible for now.
later will be only avalibe if auth is present

GET /api/v/0.1/user?name={name}&date_start={date}&date_end={date}&gender={gender}
one to all fields can be provided, gender must be ehiter 0,1 or 2
returs all matching users by query params with fields: name,gender,birth_date

GET /api/v/0.1/user/login
requires password and username as body json, for now unencrypted, redirects to /api/v/0.1/user/{ID} upon success and starts a session

GET /api/v/0.1/user/logout
redirects to /, destorys session

GET /api/v/0.1/{USER}/reset-password
for now only redirects to /, later will send email w password reset schema

POST /api/v/0.1/user/register
requires name,gender,birth_date,email,password,re-password, upon success creates a new user, creates a session for said user and redirects to /api/v/0.1/user/{ID}

POST /api/v/0.1/user/change-password
requires password,re-password, upon succes updates password, requires a valid session

GET /api/v/0.1/tag?name={name}
query searches for tags by name

POST /api/v/0.1/tag
creates new tag, requires a tag_name json field

PATCH /api/v/0.1/tag/{ID}
updates a tags name identified by ID, requires a tag_name json field

DELETE /api/v/0.1/tag/{ID}
deletes a tag by ID


