{} represent values
munkamenet jelenleg sütis megoldású, jövőben lehet hogy JSWT token lesz.

GET /api/v/0.1/user/{ID}
ID alapján visszad egy nézetet a felhasználótól: {alias, register_date, gender,birth_date, profile_description, profile_pic, profile_visibility, type}
Ha profile_visibility nem publikus (3), akkor nem minden körülmény között érhető el.
Ha a felhasználó kiválasztott egy profilképet, a profile_pic egy base64 kódolású kép egyébként meg üres, egyébként mező értéke null.
A felhasználó profilbeszédszállát és a hozzá tartozó kommenteket is visszaadja.
Visszatérési értéke egy JSON állomány.

PATCH /api/v/0.1/user/
bejelentkezés után, ID alapján frissíti a profiladatokat : {profile_description, profile_picture, profile_visibility, alias}
JSON állományt vár el, a fent írt mezőkkel, opcionálisan, legalább egyet meg kell adni.

DELETE /api/v/0.1/user/
Eltöröli a felhasználót, bejelentkezés után.
Az eltörölt profil ID-jét adja visszatérési értékként.
Igen, ez megszünteti a munkamenetet is!

GET /api/v/0.1/user?alias={alias}&date_start={date}&date_end={date}&gender={gender}
Felhasználót keres, becenév ,szül.idő és nem alapján. Nem értéke 0,1 vagy 2 lehet (férfi,nő,x).
Legalább egyik kulcs érték párt elvárja.
Visszatérési értékként egy tömbös JSON-t küld a {ID, alias, gender, birth_date} mezőkkel, eredményenként.


POST /api/v/0.1/user/login
Beléptet a rendszerbe.
JSON-ként kér {password,name} mezőket.
Sikeres belépés esetén visszaadja a User ID-jét jsonban.
Sikertelen belépés esetén átirányít a: /api/v/0.1/-ra.

POST /api/v/0.1/user/logout
Kiléptet a rendszerből, megszünteti a munkamenetet és a /api/v/0.1/-re átirányít.
Egyenlőre sajnos süti kliens oldalon marad...

POST /api/v/0.1/{USER}/reset-password
Egyenlőre nem mükszik.

POST /api/v/0.1/user/register
Regisztrál egy felhasználót.
A sikeres regisztrációhoz a {name, gender, birth_date, email ,password, re_password} mezőket követeli.
A gender mező értéke 0 , 1 és 2 lehet (férfi,nő,x).
A birth_date mezőt yyyy-mm-dd formában vár, nem lehet jövőbeli dátum.
A password ill re_password csak erős jelszó lehet, min 8 karakter, max 32, kis és nagybetű és ASCII speciális karakterek.
Sikeres regisztráció esetén létrehoz egy új munkamenetet és visszaadja a User ID-jét jsonban.
A regisztráció pillanatában nyit egy új beszédszállat a profilra.

POST /api/v/0.1/user/change-password
Belépés után elérhető.
A {password, re_password} mezőket kéri.
Siker esetén frissíti a jelszót a {password} értékére, visszaadja az {ID, password} mezőket.


GET /api/v/0.1/tag/all
Visszaadja az összes cédulát, értékek: {ID, name}, jsonban tömbösítve.

GET /api/v/0.1/tag?name={name}
Cédulát keres minimum részleges egybeeséssel, kulcs érték mező kötelező.
Eredményt JSON tömbként visszaadja, értékek {ID, name}.

POST /api/v/0.1/tag
Belépés után elérhető...
Létrehoz egy új cédulát.
A {tag_name} JSON mezőt követeli.

PATCH /api/v/0.1/tag/{ID}
Belépés után elérhető...
A cédula nevét átírja ID alapján.
JSON-ba a {tag_name} mezőt követeli.

DELETE /api/v/0.1/tag/{ID}
Belépés után elérhető...
Eltöröl egy cédulát ID alapján.

GET /api/v/0.1/media/{ID}
Visszaad egy képet base64-es kódolással, asszociált adatokkal : 
{uploader, file, uploaded, description, placeholder_text, tags[name]},
csak a file van base64-ben.

GET /api/v/0.1/media/all/{ID}
Visszaadja az adott ID-jű user összes képét listaként base64-es kódolással, asszociált adatokkal:
{uploader, file, uploaded, description, placeholder_text, tags[name]},
csak a file van base64-ben.

POST /api/v/0.1/media
Belépés után elérhető...
Egy képet form/multipart-data-val feltölt.
A következő mezőket kéri: {image, description, placeholder_text, visibility, tag_id_array}
Az image egy BLOB típus (képfálj) kell hogy legyen.
A tag_id_array egy tömb kell hogy legyen!!!
A tag_id_array csak pozitív egész számokat tartalmazhat, 0 kivételével! 
A visibility szám 0 és 3 között kell legyen, 0 privát, 1 csak barátok, 2 csak regisztráltak, 3 nyilvános láthatóságot jelenti.
A többi mező szöveges.

GET /api/v/0.1/media/search/tags?tagids={ID}
Képet keres cédula ID alapján, több id-t is elfogad
az extra id-ket &tagids={ID}&tagids={ID}... formában kéri
Siker esetén visszaad egy listát amibe az alábbi értékek vannak: {uploader, file, uploaded, description, placeholder_text, tags:[name]},
Csak a file van base64-ben.

PATCH /api/v/0.1/media/{ID}/tags
Belépés után elérhető..
ID alapján szerkeszti egy kép cédulalistáját
A {tag_id_list_remove:[]} és vagy {tag_id_list_add:[]} mezőket kéri.
A tömbökben csak pozitív egész csámok lehetnek, 0 kivételével.
A {tag_id_list_remove} eltávolít cédulákat a képről, a {tag_id_list_add} hozzáad.
Siker esetén visszadja a kép frissített cédulalistáját {ID, name} tömbösített json-ban.

POST /api/v/0.1/media/{ID}/thread
Belépés után elérhető...
Media ID-re létrehoz egy beszédszálat.
Body-ba kéri a {name} mezőt.
Siker esetén visszaadja a beszédszál ID-jét JSON-ban.

GET /api/v/0.1/thread/{ID}
Lekérdez egy beszédszálat ID alapján.
Siker esetén visszatér egy JSON-nal:
{media_ID, name, user:{ID, name}, created, last_activity, comments:[{content, ID, created, last_edit, user:{ID, name}}]}

GET /api/v/0.1/thread/all
Kilistázza az összes beszédszálat.
Visszatérése egy tömb az [{ID, name, status, created, last_activity, user:{ID, name}}] értékekkel.

GET /api/v/0.1/thread/search?name={name}&created_start={date}&created_end={date}&activity_start={date}&activity_end={date}&creater_id={userID}&parent={media || profile || sotry}&content={comment_content}
Kilistázza az összes talát beszédszálat a feltételeknek megfelelően.
Legalább egy paramétert kér.

GET /api/v/0.1/comment/{ID}
Visszaad egy kommentet ID alapján.
Visszaadott értékek: {ID, content, user:{ID, name}, thread:{ID, name}}

POST /api/v/0.1/thread/{ID}/comment
Belépés után elérhető...
Létrehoz egy kommentet az ID azonosítójú beszédszálon.
A {content} JSON mezőt kéri, ASCII karakterek megengedettek.
Siker esetén visszaadja a komment ID-jét.

PATCH /api/v/0.1/comment/{ID}
Belépés után elérhető...
Csak akkor működik ha a felhasználó a komment létrehozója.
Szerkeszt egy kommentet ID alapján.
A {content} JSON mezőt kéri, ASCII karakterek megengedettek.
Siker esetén visszadja a {ID, content, last_edit} mezőket.

DELETE /api/v/0.1/comment/{ID}
Belépés után elérhető...
Csak akkor működik ha a felhasználó a komment létrehozója.
Eltöröl egy kommentet ID alapján.
Siker esetén visszaadja a komment ID-jét.

GET /api/v/0.1/story/{ID}
Visszaad egy képtörténetet ID alapján.

GET /api/v/0.1/story/user/{ID}/all
Visszaadja az összes képtörténetet egy adott ID-jű usertől.

POST /api/v/0.1/story
Belépés után elérhető...
Létrehoz egy új képtörténetet.
JSON-ban kéri az alábbiakat : {name, visibility, description ,medias:[{ID}, {item_number}, {item_description}]}
AZ ID és item_number  0-nál nagyobb egész szám kell hogy legyen.
A visibility 0 és 3 között lehet.
Többi mező szöveges.