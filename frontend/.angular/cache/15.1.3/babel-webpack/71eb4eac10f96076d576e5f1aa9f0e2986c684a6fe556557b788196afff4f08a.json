{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class UploadComponent {\n  constructor() {\n    this.showUpload = false;\n    this.newPost = new EventEmitter();\n  }\n  ngOnInit() {}\n  onFileSelected(event) {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.newPost.emit({\n          image: reader.result,\n          likes: 0,\n          description: this.newPost.description // Use the description property from the form\n        });\n      };\n\n      reader.readAsDataURL(file);\n    }\n  }\n  onSubmit(event) {\n    event.preventDefault();\n    // Submit form logic goes here\n  }\n\n  toggleUpload() {\n    this.showUpload = !this.showUpload;\n  }\n}\nUploadComponent.ɵfac = function UploadComponent_Factory(t) {\n  return new (t || UploadComponent)();\n};\nUploadComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UploadComponent,\n  selectors: [[\"app-upload\"]],\n  decls: 1,\n  vars: 0,\n  template: function UploadComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0, \"works\");\n    }\n  },\n  styles: [\".modal[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    overflow: hidden;\\r\\n    position: fixed;\\r\\n    top: 0;\\r\\n    left: 0;\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    background: rgba(0, 0, 0, 0.5);\\r\\n    z-index: 1000;\\r\\n}\\r\\n\\r\\n.modal-dialog[_ngcontent-%COMP%] {\\r\\n    margin: 0;\\r\\n    max-width: 600px;\\r\\n}\\r\\n\\r\\n.modal-content[_ngcontent-%COMP%] {\\r\\n    background-color: #fff;\\r\\n    border: none;\\r\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdXBsb2FkL3VwbG9hZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixNQUFNO0lBQ04sT0FBTztJQUNQLFdBQVc7SUFDWCxZQUFZO0lBQ1osOEJBQThCO0lBQzlCLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxTQUFTO0lBQ1QsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLFlBQVk7SUFDWix1Q0FBdUM7QUFDM0MiLCJzb3VyY2VzQ29udGVudCI6WyIubW9kYWwge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNSk7XHJcbiAgICB6LWluZGV4OiAxMDAwO1xyXG59XHJcblxyXG4ubW9kYWwtZGlhbG9nIHtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIG1heC13aWR0aDogNjAwcHg7XHJcbn1cclxuXHJcbi5tb2RhbC1jb250ZW50IHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuNSk7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAoBA,YAAY,QAAuB,eAAe;;AAOtE,OAAM,MAAOC,eAAe;EAI1BC;IAHA,eAAU,GAAG,KAAK;IAClB,YAAO,GAAG,IAAIF,YAAY,EAA0D;EAEpE;EAEhBG,QAAQ,IACR;EAEAC,cAAc,CAACC,KAAY;IACzB,MAAMC,IAAI,GAAID,KAAK,CAACE,MAA2B,CAACC,KAAK,GAAG,CAAC,CAAC;IAC1D,IAAIF,IAAI,EAAE;MACR,MAAMG,MAAM,GAAG,IAAIC,UAAU,EAAE;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAK;QACnB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;UAChBC,KAAK,EAAEL,MAAM,CAACM,MAAgB;UAC9BC,KAAK,EAAE,CAAC;UACRC,WAAW,EAAE,IAAI,CAACL,OAAO,CAACK,WAAW,CAAC;SACvC,CAAC;MACJ,CAAC;;MACDR,MAAM,CAACS,aAAa,CAACZ,IAAI,CAAC;;EAE9B;EAEAa,QAAQ,CAACd,KAAY;IACnBA,KAAK,CAACe,cAAc,EAAE;IACtB;EACF;;EAEAC,YAAY;IACV,IAAI,CAACC,UAAU,GAAG,CAAC,IAAI,CAACA,UAAU;EACpC;;AA/BWrB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAAsB;EAAAC;EAAAC;EAAAC;IAAA;MCP5BC,qBAAK","names":["EventEmitter","UploadComponent","constructor","ngOnInit","onFileSelected","event","file","target","files","reader","FileReader","onload","newPost","emit","image","result","likes","description","readAsDataURL","onSubmit","preventDefault","toggleUpload","showUpload","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["E:\\vizsgaremek\\frontend\\src\\app\\upload\\upload.component.ts","E:\\vizsgaremek\\frontend\\src\\app\\upload\\upload.component.html"],"sourcesContent":["import { Component, EventEmitter, OnInit Output } from '@angular/core';\n\n@Component({\n  selector: 'app-upload',\n  templateUrl: './upload.component.html',\n  styleUrls: ['./upload.component.css']\n})\nexport class UploadComponent implements OnInit {\n  showUpload = false;\n  newPost = new EventEmitter<{ image: string; likes: number; description: string; }>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onFileSelected(event: Event): void {\n    const file = (event.target as HTMLInputElement).files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        this.newPost.emit({\n          image: reader.result as string,\n          likes: 0,\n          description: this.newPost.description // Use the description property from the form\n        });\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n\n  onSubmit(event: Event): void {\n    event.preventDefault();\n    // Submit form logic goes here\n  }\n\n  toggleUpload(): void {\n    this.showUpload = !this.showUpload;\n  }\n}\n","works"]},"metadata":{},"sourceType":"module","externalDependencies":[]}